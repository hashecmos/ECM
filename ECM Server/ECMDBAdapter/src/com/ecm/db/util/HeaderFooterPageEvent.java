package com.ecm.db.util;
import com.ecm.db.list.ECMUserList;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

public class HeaderFooterPageEvent extends PdfPageEventHelper {
	

    private PdfTemplate t;
    private Image total;
    private String sheetName;
    private HttpServletRequest req;
    public HeaderFooterPageEvent(String sheetName, HttpServletRequest req) {
		super();
		this.sheetName = sheetName;
		this.req = req;
	}
	public void onOpenDocument(PdfWriter writer, Document document) {
        t = writer.getDirectContent().createTemplate(30, 16);
        try {
            total = Image.getInstance(t);
            total.setRole(PdfName.ART);
        } catch (DocumentException de) {
            throw new ExceptionConverter(de);
        }
    }

    @Override
    public void onEndPage(PdfWriter writer, Document document) {
        addHeader(writer, document);
        addFooter(writer,document);
    }

    private void addHeader(PdfWriter writer ,Document document){
        PdfPTable header = new PdfPTable(2);
        try {
            // set defaults
            header.setWidths(new int[]{2, 24});
            header.setTotalWidth(1100);
            header.setLockedWidth(true);
            header.getDefaultCell().setFixedHeight(20);
            header.getDefaultCell().setBorder(Rectangle.BOTTOM);
            header.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
            Image logo = Image.getInstance(this.req.getSession().getServletContext().getRealPath("images") + "\\koc.png");
            header.addCell(logo);

            // add text
            PdfPCell text = new PdfPCell();
            text.setPaddingBottom(15);
            text.setPaddingLeft(10);
            text.setBorder(Rectangle.BOTTOM);
            text.setBorderColor(BaseColor.LIGHT_GRAY);
            String username;
			try {
				username = ECMUserList.getInstance().getLoginName( RequestHelper.getLoggedInEmployee(req, ""));
				text.addElement(new Phrase( sheetName+"Report",new Font(Font.FontFamily.HELVETICA, 16,Font.BOLD)));
	            text.addElement(new Phrase("Generated by : " + username, new Font(Font.FontFamily.HELVETICA, 8)));
	            header.addCell(text);
			} catch (Exception e) {
				
				e.printStackTrace();
			}
            
           header.writeSelectedRows(0, -1, 34, 803, writer.getDirectContent());
        } catch(DocumentException de) {
            throw new ExceptionConverter(de);
        } catch (MalformedURLException e) {
            throw new ExceptionConverter(e);
        } catch (IOException e) {
            throw new ExceptionConverter(e);
        }
    }

    private void addFooter(PdfWriter writer, Document document){
        PdfPTable footer = new PdfPTable(3);
        try {
            // set defaults
            footer.setWidths(new int[]{24, 2, 1});
            footer.setTotalWidth(1100);
            footer.setLockedWidth(true);
            footer.getDefaultCell().setFixedHeight(40);
            footer.getDefaultCell().setBorder(Rectangle.TOP);
            footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

            // add copyright
            footer.addCell(new Phrase("Report executed on : "+new Date(), new Font(Font.FontFamily.HELVETICA, 12, Font.ITALIC)));

            // add current page count
            footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            footer.getDefaultCell().setNoWrap(true);
            footer.addCell(new Phrase(String.format("Page %d of", writer.getPageNumber()), new Font(Font.FontFamily.HELVETICA, 8)));
            
            // add placeholder for total page count
            PdfPCell totalPageCount = new PdfPCell(total);
            totalPageCount.setBorder(Rectangle.TOP);
            totalPageCount.setBorderColor(BaseColor.LIGHT_GRAY);
            footer.addCell(totalPageCount);

            // write page
            PdfContentByte canvas = writer.getDirectContent();
            canvas.beginMarkedContentSequence(PdfName.ART);
            footer.writeSelectedRows(0, -1, 34, 50, canvas);
            canvas.endMarkedContentSequence();
        } catch(DocumentException de) {
            throw new ExceptionConverter(de);
        }
    }

    public void onCloseDocument(PdfWriter writer, Document document) {
        int totalLength = String.valueOf(writer.getPageNumber()).length();
        int totalWidth = totalLength * 5;
        ColumnText.showTextAligned(t, Element.ALIGN_CENTER,
                new Phrase((String.valueOf(writer.getPageNumber()-1)), new Font(Font.FontFamily.HELVETICA, 12)),
                totalWidth, 0, 0);
    }
}